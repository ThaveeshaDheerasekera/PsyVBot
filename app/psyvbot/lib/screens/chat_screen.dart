import 'dart:math';

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:psyvbot/configs/responses.dart';
import '../providers/user_inputs.dart';
import '../widgets/text_field_widget.dart';
import 'package:flutter_tts/flutter_tts.dart';

// Initialize the list to add user inputs
List<String> userInputs = [];

enum TtsState { playing, stopped }

class ChatScreen extends StatefulWidget {
  const ChatScreen({super.key});

  @override
  // ignore: library_private_types_in_public_api
  _ChatScreenState createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> {
  final TextEditingController _controller = TextEditingController();
  // Initialize the list of responses generated by the chatbot
  List<String> chatMessages = [];
  late FlutterTts flutterTts;

  @override
  void initState() {
    super.initState();
    chatMessages.add('Hi! I\'m here to listen...');
    flutterTts = FlutterTts();
  }

  @override
  void dispose() {
    flutterTts.stop();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final scrollController = ScrollController();

    return WillPopScope(
      onWillPop: () async => false,
      child: Consumer<UserInputs>(
        builder: (context, userInputs, child) => Scaffold(
          appBar: AppBar(
            backgroundColor: Color(0xFFD586D7),
            title: const Text(
              'PsyVBot',
              style: TextStyle(
                fontWeight: FontWeight.bold,
              ),
            ),
            centerTitle: true,
            leading: ClearConversation(userInputs),
            actions: [
              GetDiagnosis(userInputs),
            ],
          ),
          body: Container(
            margin: EdgeInsets.only(top: 10),
            color: Color(0xFFF6E9F7).withOpacity(0.5),
            child: Column(
              children: <Widget>[
                // List of chatbot messages
                Expanded(
                  child: ListView.builder(
                    itemCount: chatMessages.length,
                    controller: scrollController,
                    itemBuilder: (context, index) {
                      bool isUserInput = userInputs.getUserInputs
                          .contains(chatMessages[index]);
                      if (!isUserInput) {
                        return ListTile(
                          title: Container(
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(10),
                              color: Color(0xFFDC9FDF).withOpacity(0.85),
                            ),
                            margin: EdgeInsets.only(right: 75),
                            padding: const EdgeInsets.all(10),
                            child: Text(
                              chatMessages[index],
                              style: const TextStyle(fontSize: 14),
                            ),
                          ),
                        );
                      } else {
                        return ListTile(
                          title: Container(
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(10),
                              color: Color(0xFFEED2EF).withOpacity(0.85),
                            ),
                            margin: EdgeInsets.only(left: 75),
                            padding: const EdgeInsets.all(10),
                            child: Text(
                              chatMessages[index],
                              style: const TextStyle(fontSize: 14),
                            ),
                          ),
                        );
                      }
                    },
                  ),
                ),
                // TextField to enter user inputs
                Container(
                  // color: Colors.amber,
                  padding: const EdgeInsets.all(8.0),
                  child: Row(
                    children: <Widget>[
                      TextFieldWidget(
                        controller: _controller,
                      ),
                      IconButton(
                        icon: const Icon(Icons.send),
                        onPressed: () async {
                          // Save the typed message as a string variable called userInput
                          String userInput = _controller.text;
                          // Clear the text field
                          _controller.clear();

                          // Check if user input is empty
                          if (userInput.trim() == '') {
                            String response = 'Please say something.';
                            setState(() {
                              chatMessages.add(response);
                              flutterTts.speak(response);
                            });

                            return;
                          }

                          // Add user input to list
                          userInputs.addUserInput(userInput);
                          chatMessages.add(userInput);

                          // Generate response
                          String response = generateResponse(userInput);

                          // Add response to list
                          setState(() {
                            chatMessages.add(response);
                            flutterTts.speak(response);
                          });
                        },
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  // ------------------- functions -------------------

  ElevatedButton ClearConversation(UserInputs userInputs) {
    return ElevatedButton(
      onPressed: () {
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: Text(
                'Clear Chat',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                ),
              ),
              content: Text('Are you sure you want to clear the chat?'),
              actions: [
                TextButton(
                  onPressed: () => Navigator.of(context).pop(false),
                  child: Text('No'),
                ),
                TextButton(
                  onPressed: () {
                    userInputs.clearUserInputs();
                    setState(() {
                      chatMessages = [];
                      chatMessages.add('Hi! I\'m here to listen...');
                    });
                    Navigator.of(context).pop(true);
                  },
                  child: Text('Yes'),
                ),
              ],
            );
          },
        );
      },
      child: Icon(Icons.delete_outline),
      style: ElevatedButton.styleFrom(
        backgroundColor: Color(0xFFD586D7),
        elevation: 0.0,
      ),
    );
  }

  ElevatedButton GetDiagnosis(UserInputs userInputs) {
    return ElevatedButton(
      onPressed: () async {
        // check if the length of the list of user inputs is greater than 5
        if (userInputs.getUserInputs.length < 5) {
          String response =
              'Sorry, I need more information to diagnose your condition. Can you tell me more about how you\'ve been feeling?';
          setState(() {
            chatMessages.add(response);
            flutterTts.speak(response);
          });
        } else {
          // Send the user inputs to the server
          try {
            print(userInputs.getUserInputs);
            await userInputs.sendUserInputs(userInputs.getUserInputs);

            // Get the prediction from the server
            String prediction = await userInputs.getPrediction();

            setState(() {
              // Add the response to the chatMessages list
              chatMessages.add(prediction);
              flutterTts.speak(prediction);
            });
          } catch (e) {
            setState(() {
              chatMessages.add('Error: $e');
            });
          }
        }
      },
      child: Icon(Icons.play_circle_outlined),
      style: ElevatedButton.styleFrom(
        backgroundColor: Color(0xFFD586D7),
        elevation: 0.0,
      ),
    );
  }
}

// This is the function to generate a response for the user input
String generateResponse(String inputText) {
  String lastResponse = '';

  // Remove punctuation and convert to lowercase
  inputText = inputText.toLowerCase().replaceAll(RegExp(r'[!,.?]'), '');

  var rng = Random();
  String response = Responses
      .genericResponses[rng.nextInt(Responses.genericResponses.length)];
  if (response == lastResponse) {
    response = Responses
        .genericResponses[rng.nextInt(Responses.genericResponses.length)];
  }
  lastResponse = response;
  return response;
}
