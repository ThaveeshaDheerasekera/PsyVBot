import 'dart:math';

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:psyvbot/configs/responses.dart';
import '../providers/user_inputs.dart';
import '../widgets/back_button_widget.dart';
import '../widgets/chat_area_widget.dart';
import '../widgets/stop_speak_button.dart';
import '../widgets/text_field_widget.dart';
import 'package:flutter_tts/flutter_tts.dart';

// Initialize the list to add user inputs
List<String> userInputs = [];

enum TtsState { playing, stopped }

class ChatScreen extends StatefulWidget {
  const ChatScreen({super.key});

  @override
  // ignore: library_private_types_in_public_api
  _ChatScreenState createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> {
  final TextEditingController _controller = TextEditingController();
  // Initialize the list of responses generated by the chatbot
  List<String> chatMessages = [];
  late FlutterTts flutterTts;

  @override
  void initState() {
    super.initState();
    chatMessages.add('PsyVBot: Hi! I\'m here to listen...');
    flutterTts = FlutterTts();
  }

  @override
  void dispose() {
    flutterTts.stop();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final scrollController = ScrollController();

    return WillPopScope(
      onWillPop: () async => false,
      child: Consumer<UserInputs>(
        builder: (context, userInputs, child) => Scaffold(
          appBar: AppBar(
            title: const Text(
              'PsyVBot',
              style: TextStyle(
                fontWeight: FontWeight.bold,
              ),
            ),
            centerTitle: true,
            leading: const BackButtonWidget(),
            actions: [
              StopSpeakButtonWidget(flutterTts: flutterTts),
            ],
          ),
          body: Column(
            children: [
              // List of chatbot messages
              ChatAreaWidget(
                chatMessages: chatMessages,
                scrollController: scrollController,
              ),
              // TextField to enter user inputs
              Container(
                // color: Colors.amber,
                padding: const EdgeInsets.all(8.0),
                child: Row(
                  children: <Widget>[
                    TextFieldWidget(
                      controller: _controller,
                    ),
                    IconButton(
                      icon: const Icon(Icons.send),
                      onPressed: () async {
                        // Save the typed message as a string variable called userInput
                        String userInput = _controller.text;
                        // Clear the text field
                        _controller.clear();

                        // Check if user wants to end the conversation
                        if (userInput.toLowerCase() == 'clear') {
                          // Clear user inputs list
                          userInputs.clearUserInputs();
                          chatMessages = [];
                          return;
                        }

                        // Check if user wants help
                        if (userInput.toLowerCase() == 'help') {
                          String response =
                              '\n-- Instructions --\n- Type \'help\' to get instructions\n- Type \'clear\' to clear the conversation and chat history\n- Type \'diagnose\' for depression diagnosis\n-- The output is a number ranging between 0 and 1\n-- If value is arround 0.5,\n---  There is a high probability that you may have depression\n-- If value is closer to 0,\n--- You may be diagnosed with depression, which can even lead to suicidal thoughts \n-- If the value is closer to 1,\n--- You are NOT diagnosed with depression.';
                          setState(() {
                            chatMessages.add('PsyVBot: $response');
                            flutterTts.speak(response);
                          });
                          return;
                        }

                        // Check if user wants to diagnose depression
                        if (userInput.toLowerCase() == 'diagnose') {
                          // Check if user has provided enough input to diagnose depression
                          if (userInputs.getUserInputs.length < 3) {
                            String response =
                                'Sorry, I need more information to diagnose your condition. Can you tell me more about how you\'ve been feeling?';
                            setState(() {
                              chatMessages.add('PsyVBot: $response');
                              flutterTts.speak(response);
                            });
                          } else {
                            // Send the user inputs to the server
                            try {
                              await userInputs
                                  .sendUserInputs(userInputs.getUserInputs);
                              // Get the prediction from the server
                              String prediction =
                                  await userInputs.getPrediction();
                              // Generate the response based on the prediction
                              String predictionResponse =
                                  'Based on your responses, you may be experiencing $prediction.';

                              setState(() {
                                // Add the response to the chatMessages list
                                chatMessages
                                    .add('PsyVBot: $predictionResponse');
                                flutterTts.speak(predictionResponse);
                              });
                            } catch (e) {
                              setState(() {
                                chatMessages.add('Error: $e');
                              });
                            }
                          }
                          return;
                        }

                        // Check if user input is empty
                        if (userInput.trim() == '') {
                          String response = 'Please say something.';
                          setState(() {
                            chatMessages.add('PsyVBot: $response');
                            flutterTts.speak(response);
                          });

                          return;
                        }

                        // Add user input to list
                        userInputs.addUserInput(userInput);
                        chatMessages.add('You: $userInput');

                        // Generate response
                        String response = generateResponse(userInput);

                        // Add response to list
                        setState(() {
                          chatMessages.add('PsyVBot: $response');
                          flutterTts.speak(response);
                        });
                      },
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Define a function to generate a response based on user input
String generateResponse(String inputText) {
  String lastResponse = '';

  // Remove punctuation and convert to lowercase
  inputText = inputText.toLowerCase().replaceAll(RegExp(r'[!,.?]'), '');

  var rng = Random();
  String response = Responses
      .genericResponses[rng.nextInt(Responses.genericResponses.length)];
  if (response == lastResponse) {
    response = Responses
        .genericResponses[rng.nextInt(Responses.genericResponses.length)];
  }
  lastResponse = response;
  return response;
}
